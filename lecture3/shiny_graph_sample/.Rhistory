library(rgooglevis)
install.packages(rgooglevis)
install.packages('rgooglevis')
install.packages('googlevis')
install.packages('googleVis')
library('googleVis')
dat <- read.csv('/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.csv')
dat
source('~/.active-rstudio-document')
source('~/blog/2015_08_adblock/googlemap.R')
dat <- read.csv('/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.csv')
dat
dat <- read.csv('/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.csv')
dat
head(dat)
dat <- read.csv('/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.csv')
head(dat)
gvisGeoMap(dat,locationVar='Country', numvar='Adblock')
gvisGeoMap(dat,locationvar='Country', numvar='Adblock')
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock')
plot(mp)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock')
tb <- gvisTable(dat, )
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mp)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500))
tb <- gvisTable(dat, )
mt <- gvisMerge(mp,tb, horizontal=TRUE, options=list(height=500))
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500))
tb <- gvisTable(dat, options=list(height=500))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
dat <- dat[order(dat[adblock])]
dat <- dat[order(dat['adblock'])]
dat <- dat[order(dat[2])]
dat <- dat[order(dat[,2])]
dat <- dat[order(dat[,1])]
dat[,1]
dat[,2]
order(dat[,2])
dat[order(dat[,2])]
dat <- dat[,order(dat[,2])]
dat <- dat[order(dat[,2]),]
dat
dat <- dat[-order(dat[,2]),]
head(dat)
dat <- read.csv('/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.csv')
head(dat)
dat <- dat[-order(dat[,2]),]
head(dat)
dat <- read.csv('/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.csv')
head(dat)
dat <- dat[order(-dat[,2]),]
head(dat)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500))
tb <- gvisTable(dat, options=list(height=500))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500))
tb <- gvisTable(dat, options=list(height=500, formats=list(Adblock='#,#%')))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500))
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#,#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500, width=600))
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500, width=800))
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=400, width=800))
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=400, width=600))
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=500))
tb <- gvisTable(dat, options=list(height=500), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=400))
tb <- gvisTable(dat, options=list(height=400), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
mt
?print
?write
write(mt,'/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
write(mt,file='/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
attributes(mt)
write(mt$html,file='/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
attributes(mt$html)
mt$header
mt$caption
mt$footer
write(mt$html$chart,file='/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
plot(mt)
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=400, width=600))
tb <- gvisTable(dat, options=list(height=400, width=200), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=TRUE)
plot(mt)
attributes(mt$html)
write(mt$html$chart,file='/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=400, width=630))
tb <- gvisTable(dat, options=list(height=200, width=630), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=FALSE)
plot(mt)
write(mt$html$chart,file='/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
mp <- gvisGeoMap(dat,locationvar='Country', numvar='Adblock', options=list(height=400, width=630))
tb <- gvisTable(dat, options=list(height=200, width=630), formats=list(Adblock='#.#%'))
mt <- gvisMerge(mp,tb, horizontal=FALSE)
plot(mt)
attributes(mt$html)
write(mt$html$chart,file='/Users/josh.laurito/blog/2015_08_adblock/adblock_by_country.html')
plot(mt)
library(dplyr)
library(ggplot2)
data = d
head(data)
library(ggplot2)
library(plyr)
inc <- d
all.inc <- inc[complete.cases(inc)==TRUE,]
cnt <- ddply(all.inc, .(State), summarize, cnt = length(State))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity',fill="blue") + ylab("Company Count") + labs(title="Company Count by State")
portrait <- p + coord_flip()
print(portrait)
dev.off()
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity',fill="blue") + ylab("Company Count") + labs(title="Company Count by State")
portrait <- p + coord_flip()
portrait
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity',fill="blue") + ylab("Company Count") + labs(title="Company Count by State")
cnt <- ddply(all.inc, .(State), summarize, cnt = length(State))
cnt <- ddply(all.inc, .(State), summarize, cnt = length(State))
install.packages('RTools')
install_github("hadley/bigvis")
install.packages('Rtools')
R
?which
install.packages('svn')
install.packages('bio')
install.packages('Rio')
install.packages('rio')
?install.packages
install.packages('rio', verbose = getOption("verbose"))
install.packages('rcurl', verbose = getOption("verbose"))
install.packages('RCurl', verbose = getOption("verbose"))
install.packages('twitteR', verbose = getOption("verbose"))
library(devtools)
library(devtools)
library(slidify)
setwd('/Users/josh.laurito/personal/cuny/2016-spring/')
setwd('/Users/josh.laurito/personal/cuny/2016-spring/')
author('lecture3b')
library("ggplot2")
library("plyr")
library("bigvis")
setwd('/Users/josh.laurito/personal/cuny/2016-spring/lecture3b')
pData <- read.csv("all_PLUTO_data.csv")
builtFar <- pData$BuiltFAR[pData$YearBuilt > 1850 & pData$NumFloors != 0  ]
numFloor <- pData$NumFloors[pData$YearBuilt > 1850 & pData$NumFloors != 0 ]
yrBuilt  <- pData$YearBuilt[pData$YearBuilt > 1850 & pData$NumFloors != 0 ]
assessTot <- pData$AssessTot[pData$YearBuilt > 1850 & pData$NumFloors != 0]
valPerFloor <- assessTot/numFloor
```
summary(yrBuilt)
yr <- condense(bin(yrBuilt, 1))
autoplot(yr)
ggsave('assets/img/yrBuilt.png',height=2, width = 3)
yr <- condense(bin(yrBuilt, 5))
autoplot(yr)
ggsave('assets/img/yrBuilt5.png', height=2, width = 3)
yr2 <- condense(bin(yrBuilt, 1))
total <- sum(yr2$.count)
yr2$perc_built <- cumsum(yr2$.count)/total
ggplot(yr2, aes(x= yrBuilt, y=perc_built)) + geom_line() +ylab('')
ggsave('assets/img/cumcurve.png', height=2, width = 3, dpi = 100)
flrVsYr <- condense(bin(yrBuilt, 1), bin(numFloor, 1))
p <- autoplot(flrVsYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,60)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
ggsave('assets/img/yr_v_flr.png', height=2, width = 4, dpi = 300)
flrVsYr$stories <- 10*trunc(flrVsYr$numFloor/10)
flrVsYr$stories <- sapply(flrVsYr$stories, min, 50)
flrVsYr$num_built <- ave(flrVsYr$.count,flrVsYr$stories, FUN=cumsum)
flrVsYr$perc_built <- flrVsYr$num_built/ ave(flrVsYr$.count,flrVsYr$stories, FUN=sum)
ggplot(flrVsYr, aes(x=yrBuilt, y=perc_built, group=stories)) + geom_line() +
facet_wrap(~ stories) + theme(axis.text=element_text(size=5))
ggplot(complete.cases(flrVsYr), aes(x=yrBuilt, y=perc_built, group=stories)) + geom_line() +
facet_wrap(~ stories) + theme(axis.text=element_text(size=5))
ggsave('assets/img/stories.png', height=2, width = 4, dpi = 300)
ggplot(flrVsYr[complete.cases(flrVsYr),], aes(x=yrBuilt, y=perc_built, group=stories)) + geom_line() +
facet_wrap(~ stories) + theme(axis.text=element_text(size=5))
ggsave('assets/img/stories.png', height=2, width = 4, dpi = 300)
assessVsYr <- condense(bin(yrBuilt[assessTot < 5000000],3), bin(valPerFloor[assessTot < 5000000], 50000))
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill='white')) + xlim(1850,2015) + xlab('') + ylab('')
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='blue',
trans="log",
breaks=myBreaks)
ggsave('assets/img/assess.png', height=2, width = 4, dpi = 300)
?scale_fill_gradient
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='#0000ff',
trans="log",
breaks=myBreaks)
assessVsYr <- condense(bin(yrBuilt[assessTot < 5000000],3), bin(valPerFloor[assessTot < 5000000], 50000))
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill='white')) + xlim(1850,2015) + xlab('') + ylab('')
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='#0000ff',
trans="log")
ggsave('assets/img/assess.png', height=2, width = 4, dpi = 300)
p <- autoplot(flrVsYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,60)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='#0000ff',
trans="log")
ggsave('assets/img/yr_v_flr.png', height=2, width = 4, dpi = 300)
flrVal <- condense(bin(yrBuilt[assessTot < 5000000],5), z =valPerFloor[assessTot < 5000000] )
autoplot(flrVal) +xlab('') + ylab('$ per floor')
builtFar <- pData$BuiltFAR[pData$YearBuilt > 1850 & pData$YearBuilt < 2017 pData$NumFloors != 0  ]
numFloor <- pData$NumFloors[pData$YearBuilt > 1850 & pData$YearBuilt < 2017 & pData$NumFloors != 0 ]
builtFar <- pData$BuiltFAR[pData$YearBuilt > 1850 & pData$YearBuilt < 2017 & pData$NumFloors != 0  ]
numFloor <- pData$NumFloors[pData$YearBuilt > 1850 & pData$YearBuilt < 2017 & pData$NumFloors != 0 ]
yrBuilt  <- pData$YearBuilt[pData$YearBuilt > 1850 & pData$YearBuilt < 2017 & pData$NumFloors != 0 ]
assessTot <- pData$AssessTot[pData$YearBuilt > 1850 & pData$YearBuilt < 2017 & pData$NumFloors != 0]
valPerFloor <- assessTot/numFloor
summary(yrBuilt)
yr <- condense(bin(yrBuilt, 1))
autoplot(yr)
ggsave('assets/img/yrBuilt.png',height=2, width = 3)
yr <- condense(bin(yrBuilt, 5))
autoplot(yr)
ggsave('assets/img/yrBuilt5.png', height=2, width = 3)
yr2 <- condense(bin(yrBuilt, 1))
total <- sum(yr2$.count)
yr2$perc_built <- cumsum(yr2$.count)/total
ggplot(yr2, aes(x= yrBuilt, y=perc_built)) + geom_line() +ylab('')
ggsave('assets/img/cumcurve.png', height=2, width = 3, dpi = 100)
flrVsYr <- condense(bin(yrBuilt, 1), bin(numFloor, 1))
p <- autoplot(flrVsYr) + theme(panel.background=element_rect(fill='white')) + ylim(0,60)
p + scale_fill_gradient(limits= c(1,100000),
low='grey',
high='#0000ff',
trans="log")
ggsave('assets/img/yr_v_flr.png', height=2, width = 4, dpi = 300)
flrVsYr$stories <- 10*trunc(flrVsYr$numFloor/10)
flrVsYr$stories <- sapply(flrVsYr$stories, min, 50)
flrVsYr$num_built <- ave(flrVsYr$.count,flrVsYr$stories, FUN=cumsum)
flrVsYr$perc_built <- flrVsYr$num_built/ ave(flrVsYr$.count,flrVsYr$stories, FUN=sum)
ggplot(flrVsYr[complete.cases(flrVsYr),], aes(x=yrBuilt, y=perc_built, group=stories)) + geom_line() +
facet_wrap(~ stories) + theme(axis.text=element_text(size=5))
ggsave('assets/img/stories.png', height=2, width = 4, dpi = 300)
assessVsYr <- condense(bin(yrBuilt[assessTot < 5000000],3), bin(valPerFloor[assessTot < 5000000], 50000))
p <- autoplot(assessVsYr) + theme(panel.background=element_rect(fill='white')) + xlim(1850,2015) + xlab('') + ylab('')
p + scale_fill_gradient(limits= c(1,1000000),
low='grey',
high='#0000ff',
trans="log")
ggsave('assets/img/assess.png', height=2, width = 4, dpi = 300)
flrVal <- condense(bin(yrBuilt[assessTot < 5000000],5), z =valPerFloor[assessTot < 5000000] )
autoplot(flrVal) +xlab('') + ylab('$ per floor')
ggsave('assets/img/flrVal.png', height=2, width = 4, dpi = 300)
library('googlevis')
install.packages('googlevis')
install.packages('googleVis')
demo('googleVis')
library('googleVis')
demo('googleVis')
slidify('index.Rmd')
slidify('index.Rmd')
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3')
library('shiny')
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3/shiny_graph_sample')
runApp()
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3/shiny_graph_sample')
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3/shiny_graph_sample')
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3/shiny_graph_sample')
library('shiny')
runApp()
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3/shiny_graph_sample')
mort <- read.csv('../data/cdc-mortality-1999-2010.csv',
header=TRUE,
sep = ',')
# check data
summary(mort)
head(sort(mort$Crude.Rate), 100)
mort_clean <- mort[complete.cases(mort),]
rem_txt <- function(x) { as.numeric(gsub("[[:alpha:] ()]", '', x)) }
mort_clean$Crude.Rate <- sapply(mort_clean$Crude.Rate, rem_txt)
write.csv(mort_clean,
file='../data/cleaned-cdc-mortality-1999-2010.csv',
row.names=FALSE)
runApp()
data('iris')
iris
library('googleVis')
library('googleVis')
data('fruits')
data('fruit')
Fruits
dino
Cairo
plot(gvisCalendar(Cairo))
?plot
?gvisCalendar
plot(gvisCalendar(Cairo), options=list(width=1500))
plot(gvisCalendar(Cairo, options=list(width=1500)))
data(Cairo)
data(Fruits)
gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(gvisMotionChart(Fruits, idvar="Fruit", timevar="Year"))
library('shiny')
setwd('/Users/josh.laurito/src/CUNY_IS608/lecture3/shiny_graph_sample')
runApp()
demo('googleVis')
head(Cairo)
plot(gvisCalendar(Cairo, options=list(width=1500)))
plot(gvisMotionChart(Fruits, idvar="Fruit", timevar="Year"))
runApp()
